name: Auto-Fix Deployment Issues

on:
  # Trigger when deployment workflows fail
  workflow_run:
    workflows: ["Deploy to Firebase", "Deploy to Production", "Deploy to Beta"]
    types:
      - completed
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      fix_type:
        description: 'Type of fix to apply'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - security
          - dependencies
          - build
          - types

env:
  NODE_VERSION: '18'
  NPM_CACHE_PATH: ~/.npm

jobs:
  analyze-failure:
    name: Analyze Deployment Failure
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'failure' || github.event_name == 'workflow_dispatch'
    outputs:
      needs_security_fix: ${{ steps.check-issues.outputs.security_issues }}
      needs_dependency_update: ${{ steps.check-issues.outputs.dependency_issues }}
      needs_build_fix: ${{ steps.check-issues.outputs.build_issues }}
      needs_type_fix: ${{ steps.check-issues.outputs.type_issues }}
      pr_number: ${{ steps.create-pr.outputs.pr_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit

      - name: Check for issues
        id: check-issues
        run: |
          echo "Analyzing potential issues..."
          
          # Check for security vulnerabilities
          SECURITY_ISSUES="false"
          if npm audit --audit-level=high --json > audit-result.json 2>/dev/null; then
            if [ $(jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' audit-result.json) -gt 0 ]; then
              SECURITY_ISSUES="true"
              echo "High/Critical security vulnerabilities found"
            fi
          fi
          echo "security_issues=$SECURITY_ISSUES" >> $GITHUB_OUTPUT
          
          # Check for outdated dependencies
          DEPENDENCY_ISSUES="false"
          if npm outdated --json > outdated.json 2>/dev/null; then
            if [ -s outdated.json ] && [ "$(cat outdated.json)" != "{}" ]; then
              DEPENDENCY_ISSUES="true"
              echo "Outdated dependencies found"
            fi
          fi
          echo "dependency_issues=$DEPENDENCY_ISSUES" >> $GITHUB_OUTPUT
          
          # Check for TypeScript issues
          TYPE_ISSUES="false"
          if ! npm run type-check 2>&1 | tee type-check.log; then
            TYPE_ISSUES="true"
            echo "TypeScript errors found"
          fi
          echo "type_issues=$TYPE_ISSUES" >> $GITHUB_OUTPUT
          
          # Check for build issues
          BUILD_ISSUES="false"
          if ! npm run build 2>&1 | tee build.log; then
            BUILD_ISSUES="true"
            echo "Build errors found"
          fi
          echo "build_issues=$BUILD_ISSUES" >> $GITHUB_OUTPUT

      - name: Download workflow logs
        if: github.event.workflow_run.conclusion == 'failure'
        run: |
          echo "Downloading failed workflow logs for analysis..."
          # Note: This would require additional API calls to get detailed logs
          # For now, we'll rely on our local checks

  auto-fix-security:
    name: Auto-Fix Security Issues
    runs-on: ubuntu-latest
    needs: analyze-failure
    if: needs.analyze-failure.outputs.needs_security_fix == 'true' || github.event.inputs.fix_type == 'security' || github.event.inputs.fix_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run security audit and fix
        run: |
          echo "Running npm audit fix..."
          npm audit fix --force || true
          
          # If audit fix doesn't resolve all issues, try updating specific packages
          if npm audit --audit-level=high --json > audit-after-fix.json; then
            if [ $(jq '.metadata.vulnerabilities.high + .metadata.vulnerabilities.critical' audit-after-fix.json) -gt 0 ]; then
              echo "Some vulnerabilities remain, attempting manual fixes..."
              
              # Extract vulnerable packages and try to update them
              jq -r '.vulnerabilities | keys[]' audit-after-fix.json | while read package; do
                echo "Attempting to update $package..."
                npm update "$package" || true
              done
            fi
          fi

      - name: Commit security fixes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add package*.json
            git commit -m "fix: auto-fix security vulnerabilities
            
            - Applied npm audit fix
            - Updated vulnerable dependencies
            - Automated by GitHub Actions auto-fix workflow"
          fi

  auto-fix-dependencies:
    name: Auto-Fix Dependencies
    runs-on: ubuntu-latest
    needs: analyze-failure
    if: needs.analyze-failure.outputs.needs_dependency_update == 'true' || github.event.inputs.fix_type == 'dependencies' || github.event.inputs.fix_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Update dependencies safely
        run: |
          echo "Updating patch and minor versions..."
          
          # Update patch versions (safe updates)
          npx npm-check-updates --target patch --upgrade
          
          # Update minor versions for dev dependencies (usually safe)
          npx npm-check-updates --target minor --dep dev --upgrade
          
          # Install updated dependencies
          npm install

      - name: Run tests after dependency updates
        run: |
          echo "Running tests to verify dependency updates..."
          npm run ci:test || {
            echo "Tests failed after dependency update, reverting..."
            git checkout -- package*.json
            npm ci
            exit 1
          }

      - name: Commit dependency updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add package*.json
            git commit -m "chore: auto-update dependencies
            
            - Updated patch and minor versions
            - All tests passing after updates
            - Automated by GitHub Actions auto-fix workflow"
          fi

  auto-fix-build:
    name: Auto-Fix Build Issues
    runs-on: ubuntu-latest
    needs: analyze-failure
    if: needs.analyze-failure.outputs.needs_build_fix == 'true' || github.event.inputs.fix_type == 'build' || github.event.inputs.fix_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Clean and rebuild
        run: |
          echo "Cleaning build artifacts..."
          npm run clean
          
          echo "Clearing npm cache..."
          npm cache clean --force
          
          echo "Reinstalling dependencies..."
          rm -rf node_modules package-lock.json
          npm install
          
          echo "Attempting build..."
          npm run build

      - name: Fix common build issues
        if: failure()
        run: |
          echo "Build failed, attempting common fixes..."
          
          # Clear Next.js cache
          rm -rf .next
          
          # Update Next.js if it's outdated
          npm update next
          
          # Try build again
          npm run build || {
            echo "Build still failing, creating issue for manual review"
            exit 1
          }

      - name: Commit build fixes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add .
            git commit -m "fix: resolve build issues
            
            - Cleaned build artifacts
            - Updated dependencies
            - Build now successful
            - Automated by GitHub Actions auto-fix workflow"
          fi

  create-fix-pr:
    name: Create Pull Request with Fixes
    runs-on: ubuntu-latest
    needs: [analyze-failure, auto-fix-security, auto-fix-dependencies, auto-fix-build]
    if: always() && (needs.auto-fix-security.result == 'success' || needs.auto-fix-dependencies.result == 'success' || needs.auto-fix-build.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Pull latest changes from fix jobs
        run: |
          git fetch origin
          git rebase origin/main || {
            echo "Rebase conflict detected, will create PR anyway"
            git rebase --abort
          }

      - name: Create fix branch
        run: |
          BRANCH_NAME="auto-fix/deployment-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Install dependencies and run final verification
        run: |
          npm ci
          npm run ci:test || {
            echo "Final tests failed, but creating PR for manual review"
          }

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          title: "🤖 Auto-fix: Deployment Issues"
          body: |
            ## Auto-Generated Deployment Fixes
            
            This PR contains automated fixes for deployment issues detected in the pipeline.
            
            ### Issues Addressed:
            - 🔒 Security vulnerabilities: ${{ needs.analyze-failure.outputs.needs_security_fix }}
            - 📦 Dependency updates: ${{ needs.analyze-failure.outputs.needs_dependency_update }}
            - 🔨 Build issues: ${{ needs.analyze-failure.outputs.needs_build_fix }}
            - 🏷️ Type errors: ${{ needs.analyze-failure.outputs.needs_type_fix }}
            
            ### Changes Made:
            - Applied `npm audit fix` for security vulnerabilities
            - Updated patch and minor dependency versions
            - Cleaned build artifacts and updated build dependencies
            - All changes tested with the full CI pipeline
            
            ### Testing:
            - [ ] Security audit passes
            - [ ] All tests pass
            - [ ] Build completes successfully
            - [ ] Type checking passes
            
            **⚠️ Please review these changes before merging, especially any dependency updates.**
            
            ---
            *This PR was automatically created by the deployment monitoring system.*
          labels: |
            automated
            deployment-fix
            security
          assignees: ${{ github.actor }}
          draft: false

  notify-status:
    name: Notify Fix Status
    runs-on: ubuntu-latest
    needs: [analyze-failure, create-fix-pr]
    if: always()
    steps:
      - name: Notify success
        if: needs.create-fix-pr.result == 'success'
        run: |
          echo "✅ Auto-fix completed successfully!"
          echo "PR created with fixes for deployment issues."

      - name: Notify failure
        if: needs.create-fix-pr.result == 'failure' || needs.analyze-failure.result == 'failure'
        run: |
          echo "❌ Auto-fix failed!"
          echo "Manual intervention required for deployment issues."
          # In a real environment, you might want to send Slack/email notifications here