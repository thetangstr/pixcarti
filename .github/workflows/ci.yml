name: CI Pipeline

on:
  pull_request:
    branches:
      - main
      - beta
      - develop
  push:
    branches:
      - develop

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 1

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
      tests: ${{ steps.changes.outputs.tests }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'app/**'
              - 'prisma/**'
              - 'next.config.js'
              - 'tailwind.config.js'
              - 'postcss.config.js'
              - 'tsconfig.json'
            tests:
              - 'tests/**'
              - 'playwright.config.ts'
            dependencies:
              - 'package.json'
              - 'package-lock.json'

  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.dependencies == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Run ESLint
        run: npm run lint:check

      - name: Run TypeScript type checking
        run: npm run type-check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.src == 'true' || needs.changes.outputs.tests == 'true' || needs.changes.outputs.dependencies == 'true'
    
    strategy:
      matrix:
        node-version: ['18', '20']
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create test environment file
        run: |
          echo "NEXTAUTH_URL=http://localhost:3000" >> .env.local
          echo "NEXTAUTH_SECRET=test-secret-for-ci" >> .env.local
          echo "DATABASE_URL=file:./test.db" >> .env.local

      - name: Run Playwright tests
        run: npm run test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-node-${{ matrix.node-version }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    if: always() && (needs.lint-and-typecheck.result == 'success' || needs.lint-and-typecheck.result == 'skipped') && (needs.test.result == 'success' || needs.test.result == 'skipped')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create build environment file
        run: |
          echo "NEXTAUTH_URL=https://example.com" >> .env.local
          echo "NEXTAUTH_SECRET=build-secret" >> .env.local
          echo "DATABASE_URL=postgresql://user:pass@localhost:5432/db" >> .env.local

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Build Next.js application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Export static files
        run: npm run export

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: out/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run security scan with Semgrep
        uses: securecodewarrior/github-action-add-sarif@v1
        if: github.actor != 'dependabot[bot]'
        with:
          sarif-file: semgrep.sarif
        continue-on-error: true

  preview-deploy:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' && needs.build.result == 'success'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: out/

      - name: Deploy to Firebase Preview Channel
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          projectId: '${{ secrets.FIREBASE_PROJECT_ID }}'
          expires: 7d

  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, security-scan]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint-and-typecheck.result }}" != "success" && "${{ needs.lint-and-typecheck.result }}" != "skipped" ]]; then
            echo "Lint and type check failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" && "${{ needs.test.result }}" != "skipped" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" && "${{ needs.build.result }}" != "skipped" ]]; then
            echo "Build failed"
            exit 1
          fi
          echo "All checks passed!"