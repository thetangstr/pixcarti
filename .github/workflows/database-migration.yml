name: Database Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run migration against'
        required: true
        type: choice
        options:
          - beta
          - production
        default: beta
      migration_action:
        description: 'Migration action to perform'
        required: true
        type: choice
        options:
          - deploy
          - reset
          - status
        default: deploy
      confirm_production:
        description: 'Type "CONFIRM" to run migrations on production'
        required: false
        type: string

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 1

jobs:
  validate-migration:
    name: Validate Migration Request
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate production migration
        if: inputs.environment == 'production'
        run: |
          if [[ "${{ inputs.confirm_production }}" != "CONFIRM" ]]; then
            echo "‚ùå Production migrations require confirmation"
            echo "Please type 'CONFIRM' in the confirm_production field"
            exit 1
          fi
          echo "‚úÖ Production migration confirmed"

      - name: Check branch for production migrations
        if: inputs.environment == 'production'
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "‚ùå Production migrations can only be run from the main branch"
            echo "Current branch: ${{ github.ref }}"
            exit 1
          fi
          echo "‚úÖ Running from main branch"

      - name: Validate migration action
        run: |
          echo "Migration request validated:"
          echo "- Environment: ${{ inputs.environment }}"
          echo "- Action: ${{ inputs.migration_action }}"
          echo "- Branch: ${{ github.ref }}"
          echo "- Actor: ${{ github.actor }}"

  backup-database:
    name: Backup Database
    runs-on: ubuntu-latest
    needs: validate-migration
    if: inputs.migration_action == 'deploy' || inputs.migration_action == 'reset'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Create database backup
        run: |
          echo "Creating database backup..."
          timestamp=$(date +"%Y%m%d_%H%M%S")
          backup_name="backup_${{ inputs.environment }}_${timestamp}"
          
          # Note: Actual backup implementation depends on your database provider
          # For PostgreSQL on cloud providers, you'd typically use their backup APIs
          # This is a placeholder for the backup process
          
          echo "Backup name: ${backup_name}"
          echo "BACKUP_NAME=${backup_name}" >> $GITHUB_ENV
        env:
          DATABASE_URL: ${{ inputs.environment == 'production' && secrets.DATABASE_URL_PROD || secrets.DATABASE_URL_BETA }}

      - name: Verify backup
        run: |
          echo "‚úÖ Database backup created: ${{ env.BACKUP_NAME }}"
          echo "Backup can be restored if migration fails"

  run-migration:
    name: Run Database Migration
    runs-on: ubuntu-latest
    needs: [validate-migration, backup-database]
    if: always() && needs.validate-migration.result == 'success' && (needs.backup-database.result == 'success' || needs.backup-database.result == 'skipped')
    environment: 
      name: ${{ inputs.environment }}-db
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Check migration status (pre-migration)
        run: |
          echo "Checking current migration status..."
          npx prisma migrate status || echo "Migration status check completed"
        env:
          DATABASE_URL: ${{ inputs.environment == 'production' && secrets.DATABASE_URL_PROD || secrets.DATABASE_URL_BETA }}

      - name: Deploy migrations
        if: inputs.migration_action == 'deploy'
        run: |
          echo "Deploying database migrations..."
          npx prisma migrate deploy
          echo "‚úÖ Migrations deployed successfully"
        env:
          DATABASE_URL: ${{ inputs.environment == 'production' && secrets.DATABASE_URL_PROD || secrets.DATABASE_URL_BETA }}

      - name: Reset database
        if: inputs.migration_action == 'reset'
        run: |
          echo "‚ö†Ô∏è  Resetting database - THIS WILL DELETE ALL DATA"
          npx prisma migrate reset --force
          echo "‚úÖ Database reset completed"
        env:
          DATABASE_URL: ${{ inputs.environment == 'production' && secrets.DATABASE_URL_PROD || secrets.DATABASE_URL_BETA }}

      - name: Check migration status (post-migration)
        run: |
          echo "Checking final migration status..."
          npx prisma migrate status
        env:
          DATABASE_URL: ${{ inputs.environment == 'production' && secrets.DATABASE_URL_PROD || secrets.DATABASE_URL_BETA }}

      - name: Generate final Prisma Client
        run: npm run prisma:generate

  verify-migration:
    name: Verify Migration
    runs-on: ubuntu-latest
    needs: run-migration
    if: success() && (inputs.migration_action == 'deploy' || inputs.migration_action == 'reset')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Test database connection
        run: |
          echo "Testing database connection..."
          node -e "
            const { PrismaClient } = require('@prisma/client');
            const prisma = new PrismaClient();
            prisma.\$connect()
              .then(() => {
                console.log('‚úÖ Database connection successful');
                return prisma.\$disconnect();
              })
              .catch((error) => {
                console.error('‚ùå Database connection failed:', error);
                process.exit(1);
              });
          "
        env:
          DATABASE_URL: ${{ inputs.environment == 'production' && secrets.DATABASE_URL_PROD || secrets.DATABASE_URL_BETA }}

      - name: Validate schema
        run: |
          echo "Validating database schema..."
          npx prisma validate
          echo "‚úÖ Schema validation successful"

      - name: Check table structure
        run: |
          echo "Checking table structure..."
          node -e "
            const { PrismaClient } = require('@prisma/client');
            const prisma = new PrismaClient();
            
            async function checkTables() {
              try {
                // Test basic operations on main tables
                await prisma.user.findMany({ take: 1 });
                console.log('‚úÖ User table accessible');
                
                await prisma.account.findMany({ take: 1 });
                console.log('‚úÖ Account table accessible');
                
                await prisma.session.findMany({ take: 1 });
                console.log('‚úÖ Session table accessible');
                
                await prisma.painting.findMany({ take: 1 });
                console.log('‚úÖ Painting table accessible');
                
                console.log('‚úÖ All tables verified successfully');
              } catch (error) {
                console.error('‚ùå Table verification failed:', error);
                process.exit(1);
              } finally {
                await prisma.\$disconnect();
              }
            }
            
            checkTables();
          "
        env:
          DATABASE_URL: ${{ inputs.environment == 'production' && secrets.DATABASE_URL_PROD || secrets.DATABASE_URL_BETA }}

  migration-status:
    name: Show Migration Status
    runs-on: ubuntu-latest
    needs: validate-migration
    if: inputs.migration_action == 'status'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npm run prisma:generate

      - name: Show migration status
        run: |
          echo "Migration status for ${{ inputs.environment }}:"
          npx prisma migrate status
        env:
          DATABASE_URL: ${{ inputs.environment == 'production' && secrets.DATABASE_URL_PROD || secrets.DATABASE_URL_BETA }}

  notify-completion:
    name: Notify Migration Completion
    runs-on: ubuntu-latest
    needs: [run-migration, verify-migration, migration-status]
    if: always()
    
    steps:
      - name: Migration summary
        run: |
          echo "üìä Migration Summary"
          echo "==================="
          echo "Environment: ${{ inputs.environment }}"
          echo "Action: ${{ inputs.migration_action }}"
          echo "Branch: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          echo "Timestamp: $(date -u)"
          echo ""
          
          if [[ "${{ needs.run-migration.result }}" == "success" ]]; then
            echo "‚úÖ Migration executed successfully"
          elif [[ "${{ needs.run-migration.result }}" == "failure" ]]; then
            echo "‚ùå Migration failed"
          elif [[ "${{ needs.run-migration.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è Migration skipped"
          fi
          
          if [[ "${{ needs.verify-migration.result }}" == "success" ]]; then
            echo "‚úÖ Migration verification successful"
          elif [[ "${{ needs.verify-migration.result }}" == "failure" ]]; then
            echo "‚ùå Migration verification failed"
          elif [[ "${{ needs.verify-migration.result }}" == "skipped" ]]; then
            echo "‚è≠Ô∏è Migration verification skipped"
          fi